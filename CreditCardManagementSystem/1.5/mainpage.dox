/**
 * @mainpage Credit Card Management API (Version 1.5)
 *
 * @section intro_sec Introduction
 *
 * Welcome to the documentation for the Credit Card Management API version 1.5! This version introduces significant enhancements
 * and improvements to the functionality provided in the previous version, offering developers more robust tools for
 * managing credit card-related operations in their applications.
 *
 * @section changes_sec Changes in Version 1.5
 *
 * @subsection enhancements_subsec Enhancements
 *
 * - Introduced Versioning in Deprecation: Deprecated the get_balance method using the @deprecated decorator from the typing_extensions module, specifying version 1.0 and providing a reason. This allows users to identify deprecated methods easily and migrate to newer versions.
 * - Added Enhanced Balance Retrieval Method: Introduced get_balance_v2 method to replace the deprecated get_balance method. This new method provides enhanced functionality for retrieving the account balance based on specified criteria such as date range, transaction type, and merchant. It offers more flexibility and control over balance calculation.
 * - Improved Transaction Filtering: Refactored the _filter_transactions method to handle filtering based on various criteria such as start and end dates, transaction type, and merchant. This enhances the flexibility and usability of transaction filtering, allowing users to extract specific subsets of transactions as needed.
 * - Updated Payment Initiation Process: Enhanced the initiate_payment method in the CreditCardManager class to simulate a payment process by updating the account balance based on the transaction amount. This provides a more realistic scenario for handling payment transactions within the system.
 *
 * @subsection deprecated_features_subsec Deprecated Features
 *
 * - Deprecation of get_balance Method: Deprecated the get_balance method in the Account class using the @deprecated decorator. This method is replaced by the get_balance_v2 method, which offers an upgraded version with enhanced functionality.
 *
 * @section remarks_sec Remarks
 *
 * Version 1.5 introduces several enhancements to improve the functionality and usability of the credit card management system. By deprecating outdated methods and introducing new features like enhanced balance retrieval and improved transaction filtering, the API becomes more robust and user-friendly. Users are encouraged to migrate to the newer version to take advantage of these enhancements and ensure compatibility with future updates.
 *
 * @section getting_started_sec Getting Started
 *
 * To start using the Credit Card Management API version 1.5, follow these steps:
 *
 * 1. **Integration**: Integrate the updated API into your application, ensuring compatibility with version 1.5.
 * 2. **Migration**: If upgrading from a previous version, review the migration guide for any necessary updates to your existing code.
 * 3. **Enhanced Functionality**: Take advantage of the new features and improvements provided by version 1.5, such as enhanced credit card management and improved transaction filtering.
 * 4. **Feedback**: Provide feedback on your experience with the new version, including any issues encountered or suggestions for further improvements.
 *
 * @section api_reference_sec API Reference
 *
 * For detailed information on the classes, methods, and parameters provided by the API, refer to the following documentation pages:
 *
 * - @ref account_page "Account Class"
 * - @ref credit_card_page "CreditCard Class"
 * - @ref transaction_page "Transaction Class"
 * - @ref session_page "Session Class"
 *
 * @section sample_code_sec Sample Code
 *
 * Here's an example of how to use the API to initiate a payment using the enhanced payment initiation process:
 *
 * ```python
 * # Initialize CreditCardManager and retrieve an account
 * credit_card_manager = CreditCardManager()
 * account = credit_card_manager.get_account("user123")
 *
 * # Initiate payment using the enhanced process
 * payment_successful = credit_card_manager.initiate_payment(
 *     account.user_id, card_number, amount, "Online Store")
 *
 * if payment_successful:
 *   print("Payment successful!")
 *   # Update account balance based on the transaction
 *   user_account.update_balance(Transaction(account.user_id, amount, datetime.now(), "Online Store", True))
 *   print(f"Current account balance: ${user_account.get_balance_v2():.2f}")
 * else:
 *   print("Payment failed!")
 * ```
 *
 *
 * @section version_sec Version History
 *
 * - Version 1.5: Enhanced credit card management, improved transaction filtering, and deprecated outdated features for better usability and functionality.
 * - Version 1.0: Initial release of the Credit Card Management API.
 */
